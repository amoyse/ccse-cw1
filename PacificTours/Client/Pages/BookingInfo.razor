@page "/BookingInfo"
@page "/BookingInfo/{Id:int}"
@using PacificTours.Shared.Entities
@using PacificTours.Shared
@using System.Runtime.InteropServices.JavaScript
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Booking Info</h3>

@if (_hotelInfo is null && _tourInfo is null)
{
    <br/>
    <span>Loading Booking Info...</span>
    <br/>
}
else
{
    <br/>
    <h4>Booking Status: @_booking.Status</h4>
    <br/>
    @if (_hotelInfo is not null && _tourInfo is not null)
    {
        <br/>
        <div style="display:block; width:100%;">
            <div style="width:50%; float: left; display: inline-block;">
                <h5>Hotel Booking</h5>
                <div>Name: @_hotelInfo.Name</div>
                <div>Room Type: @_hotelInfo.RoomType</div>
                <div>Start Date: @_startDate</div>
                <div>End Date: @_endDate</div>
                <div>Cost per night: £@_hotelInfo.RoomCost</div>
                @if (_booking.Status == "In Progress")
                {
                    <button class="btn btn-danger" @onclick="() => RemoveBooking(_hotel, _hotelInfo.Id)">Cancel</button>
                }
            </div>
            <div style="width:50%; float: left; display: inline-block;">
                <h5>Tour Booking</h5>
                <div>Name: @_tourInfo.Name</div>
                <div>Start Date: @_tourInfo.StartDate</div>
                <div>Duration: @_tourInfo.Duration days</div>
                <div>Cost: £@_tourInfo.Cost</div>
                @if (_booking.Status == "In Progress")
                {
                    <button class="btn btn-danger" @onclick="() => RemoveBooking(_tour, _tourInfo.Id)">Cancel</button>
                }
            </div>
        </div>
    }
    else if (_hotelInfo is not null)
    {
        <br/>
        <div style="display:block; width:100%;">
            <div style="width:50%; float: left; display: inline-block;">
                <h5>Hotel Booking</h5>
                <div>Name: @_hotelInfo.Name</div>
                <div>Room Type: @_hotelInfo.RoomType</div>
                <div>Start Date: @_startDate</div>
                <div>End Date: @_endDate</div>
                <div>Cost per night: £@_hotelInfo.RoomCost</div>
                @if (_booking.Status == "In Progress")
                {
                    <button class="btn btn-danger" @onclick="() => RemoveBooking(_hotel, _hotelInfo.Id)">Cancel</button>
                }
            </div>
            <div style="width:50%; float: left; display: inline-block;">
                @if (_booking.Status == "In Progress")
                {
                    <div>No Tour booking. If you add a Tour and create a package, you'll receive a discount.</div>
                }
            </div>
        </div>
    }
    else if (_tourInfo is not null)
    {
        <br/>
        <div style="display:block; width:100%;">
            <div style="width:50%; float: left; display: inline-block;">
                <h5>Tour Booking</h5>
                <div>Name: @_tourInfo.Name</div>
                <div>Start Date: @_tourInfo.StartDate</div>
                <div>Duration: @_tourInfo.Duration days</div>
                <div>Cost: £@_tourInfo.Cost</div>
                @if (_booking.Status == "In Progress")
                {
                    <button class="btn btn-danger" @onclick="() => RemoveBooking(_tour, _tourInfo.Id)">Cancel</button>
                }
            </div>
            <div style="width:50%; float: left; display: inline-block;">
                @if (_booking.Status == "In Progress")
                {
                    <div>No Hotel booking. If you add a Hotel and create a package, you'll receive a discount.</div>
                }
            </div>
        </div>
    } 
    <br/><br/><br/><br/><br/><br/><br/><br/><br/>
    @if (_isVoided)
    {
        <div>Payment to confirm booking was not made in time, the booking has been voided, and the deposit forfeited.</div>
    }
    else if (_booking.Status == "In Progress")
    {
        <div>Total Cost: £@_booking.TotalCost</div>
        <br/>
        <button class="btn btn-primary" @onclick="(() => ReserveBooking(Id))">Reserve Booking</button>
    }
    else if (_booking.Status == "Reserved")
    {
        <div>Remaining amount must be paid 28 days before booking start date</div>
        <br/>
        <div>Left to pay: £@_booking.TotalCost</div>
        <button class="btn btn-primary" @onclick="(() => ConfirmBooking(Id))" >Confirm Booking</button>
    } 
    else if (_booking.Status == "Confirmed")
    {
        @if (_canCancel)
        {
            // Refund user, delete booking from database
            <button class="btn btn-primary" @onclick="Delete">Cancel Booking</button>
        }
        @if (_canModify)
        {
            // This will "refund" user what they have paid so far, set Booking status to in progress, and set cost again
            <button class="btn btn-primary" >Modify Booking</button>
        }
    }
    @if (_payments?.Count > 0)
    {
        <br/><br/><br/>
        <h4>Past payments</h4>
        <table>
            <thead>
            <tr>
                <th>Payment Id</th>
                <th>Amount Paid</th>
                <th>Payment Status</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var payment in _payments)
            {
                <tr>
                    <td width="8%">@payment.Id</td>
                    <td width="12%">£@payment.Amount</td>
                    <td width="12%">@payment.Status</td>
                </tr>
            }
            </tbody>
        </table>
    }
}


@code {
    [Parameter]
    public int? Id { get; set; }

    TourBookingInfoDto? _tourInfo;
    HotelBookingInfoDto? _hotelInfo;
    private Booking? _booking;
    List<Payment>? _payments;
    private readonly string _hotel = "hotel";
    private readonly string _tour = "tour";
    private DateOnly _startDate;
    private DateOnly _endDate;
    private bool _isVoided;
    private bool _canCancel;
    private bool _canModify;
    

    protected override async Task OnInitializedAsync()
    {
        var authorized = await Http.GetFromJsonAsync<bool>($"api/Auth/IsAuthorized?id={Id}");
        if (!authorized)
        {
            NavigationManager.NavigateTo("/");
        }
        
        var tourResult = await Http.GetFromJsonAsync<TourBookingInfoDto>($"api/Booking/TourBookingInfo?id={Id}");
        var hotelResult = await Http.GetFromJsonAsync<HotelBookingInfoDto>($"api/Booking/HotelBookingInfo?id={Id}");
        var bookingResult = await Http.GetFromJsonAsync<Booking>($"api/Booking/GetBookingInfo?id={Id}");
        var paymentResult = await Http.GetFromJsonAsync<List<Payment>>($"api/Payments/GetPayments?id={Id}");
        
        if (paymentResult != null)
        {
            _payments = paymentResult;
        }
        
        _booking = bookingResult;

        if (tourResult is null && hotelResult is null)
        {
            NavigationManager.NavigateTo("/");
        }
        if (tourResult != null)
        {
            _tourInfo = tourResult;
        }
        if (hotelResult != null)
        {
            _hotelInfo = hotelResult;
            _startDate = DateOnly.FromDateTime(_hotelInfo.StartDate);
            _endDate = DateOnly.FromDateTime(_hotelInfo.EndDate);
        }

        if (_booking?.Status != "Confirmed" && _booking is not null)
        {
            await CheckBooking(_booking.Id);
        } 
    }
    
    
    private void ReserveBooking(int? id)
    {
        var paymentId = id ?? default(int);
        NavigationManager.NavigateTo($"/Payment/{paymentId}");
    }
    
    private void ConfirmBooking(int? id)
    {
        var paymentId = id ?? default(int);
        NavigationManager.NavigateTo($"/Payment/{paymentId}");
    }
    
    private async Task RemoveBooking(string type, int id)
    {
        if (type == _hotel)
        {
            await Http.DeleteAsync($"api/Booking/DeleteHotel?id={id}");
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            await Http.DeleteAsync($"api/Booking/DeleteTour?id={id}" );
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task CheckBooking(int id)
    {
        var latestPay = DateTime.Now.AddDays(28).Date;
        if (_tourInfo is not null && _hotelInfo is not null)
        {
            if (_tourInfo.StartDate.Date > _hotelInfo.StartDate.Date)
            {
                if (latestPay > _hotelInfo.StartDate.Date)
                {
                    _isVoided = true;
                    await Http.PostAsync($"api/Booking/VoidBooking?id={id}", null);
                    NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                }
            }
            else
            {
                if (latestPay > _tourInfo.StartDate.Date)
                {
                    _isVoided = true;
                    await Http.PostAsync($"api/Booking/VoidBooking?id={id}", null);
                    NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                }
            }
        }
        else if (_tourInfo != null)
        {
            if (latestPay > _tourInfo.StartDate.Date)
            {
                _isVoided = true;
                await Http.PostAsync($"api/Booking/VoidBooking?id={id}", null);
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
        else if (_hotelInfo != null)
        {
            if (latestPay > _hotelInfo.StartDate.Date)
            {
                _isVoided = true;
                await Http.PostAsync($"api/Booking/VoidBooking?id={id}", null);
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
    }
    
    async Task Delete()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the booking?"))
            return;

        await Http.DeleteAsync($"api/Booking/DeleteBooking?id={Id}");
        
    }
}