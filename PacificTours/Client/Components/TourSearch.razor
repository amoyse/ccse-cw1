@using PacificTours.Shared.Entities
@using PacificTours.Shared
@using System.Runtime.InteropServices.JavaScript
@using PacificTours.Client.Pages
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Search Tour Availability</h3>

<InputDate TValue="DateTime" @bind-Value="_date1" Placeholder="Enter Start Date"/>
<button class="btn btn-primary" @onclick="GetToursOnDate">Submit</button>

<br/><br/>

@if (_display)
{
    @if (_tours is null)
    {
        <span>Loading Tours...</span>
    }
    else
    {
        <table>
            <thead>
            <tr>
                <th>Name</th>
                <th>Duration</th>
                <th>Cost</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var tour in _tours)
            {
                <tr>
                    @if (tour.Name != "")
                    {
                        <td width="18%">@tour.Name</td>
                        <td width="10%">@tour.Duration days</td>
                        <td width="10%">Â£@tour.Cost</td>
                        @if (_tourInfo is null)
                        {
                            <td width="10%">
                                <button @onclick="(() => BookTour(tour.Id, _date1))" class="btn btn-primary">Book Tour</button>
                            </td>
                        }
                    }
                </tr>
            }
            </tbody>
        </table>
    }
}


@code {
    private DateTime _date1 = DateTime.Now.AddDays(1);

    private bool _display = false;
    List<Tour>? _tours;
    
    
    TourBookingInfoDto? _tourInfo;

    protected override async Task OnInitializedAsync()
    {
        var tourResult = await Http.GetFromJsonAsync<TourBookingInfoDto>("api/Booking/TourBookingInfo");

        if (tourResult != null)
        {
            _tourInfo = tourResult;
        }
    }
    
    private async Task GetToursOnDate()
    {
        _display = true;
        var result = await Http.GetFromJsonAsync<List<Tour>>($"/api/Tours/GetDates?startDate={_date1:yyyy-MM-dd}");
        
        if (result != null)
        {
            _tours = result;
        }
    }

    private async Task BookTour(int id, DateTime startDate)
    {

        TourBookingInfoDto tourBookingInfo = new TourBookingInfoDto
        {
            Id = id, 
            StartDate = startDate, 
        };
        
        await Http.PostAsJsonAsync("api/Booking/AddTourBooking", tourBookingInfo);
        var booking = Http.GetFromJsonAsync<Booking>("api/Booking/GetBookingInfoInProgress");
        NavigationManager.NavigateTo($"/BookingInfo/{booking.Id}");
    }
}
