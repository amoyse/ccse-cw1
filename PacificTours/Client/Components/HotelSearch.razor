@using PacificTours.Shared.Entities
@using PacificTours.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Search Hotel Availability</h3>

<InputDate TValue="DateTime" @bind-Value="_date1" min="@_minStartDate.ToString("yyyy-MM-dd")" Placeholder="Enter Start Date"/>

@* prevent user from entering a date before the previous date, or on the same day *@
<InputDate TValue="DateTime" @bind-Value="_date2" min="@_date1.AddDays(1).ToString("yyyy-MM-dd")"  Placeholder="Enter End Date"/>
<button class="btn btn-primary" @onclick="GetHotelsBetweenDates">Submit</button>

<br/><br/>

@if (_display)
{
    @if (_hotels is null)
    {
        <span>Loading Hotels...</span>
    }
    else
    {
        <table>
            <thead>
            <tr>
                <th>Name</th>
                <th>Cost of Single Room</th>
                <th>Cost of Double Room</th>
                <th>Cost of Family Room</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var hotel in _hotels)
            {
                <tr>
                    @if (hotel.SingleCost == 0 && hotel.DoubleCost == 0 && hotel.FamilyCost == 0)
                    {
                        // don't show any hotel details if no costs have been sent back
                    }
                    else
                    {
                        <td width="15%">@hotel.Name</td>
                        @if (hotel.SingleCost == 0)
                        {
                            <td width="9%">Not available</td>
                            
                        }
                        else
                        {
                            <td width="9%">£@hotel.SingleCost</td>
                            
                        }
                        @if (hotel.DoubleCost == 0)
                        {
                            <td width="9%">Not available</td>
                            
                        }
                        else
                        {
                            <td width="9%">£@hotel.DoubleCost</td>
                            
                        }
                        @if (hotel.FamilyCost == 0)
                        {
                            <td width="9%">Not available</td>
                            
                        }
                        else
                        {
                            <td width="9%">£@hotel.FamilyCost</td>
                            
                        }
                        @if (_hotelInfo is null)
                        {
                            <td><button @onclick="(() => BookRoom(hotel.Id, hotel.SingleCost, _single))" class="btn btn-primary">Book Single Room</button>
                                <button @onclick="(() => BookRoom(hotel.Id, hotel.DoubleCost, _double))" class="btn btn-primary">Book Double Room</button>
                                <button @onclick="(() => BookRoom(hotel.Id, hotel.FamilyCost, _family))" class="btn btn-primary">Book Family Room</button>
                            </td>
                        }
                        
                    }
                </tr>
            }
            </tbody>
        </table>
    }
}


@code {
    private DateTime _date1 = DateTime.Now.AddDays(1);
    private DateTime _date2 = DateTime.Now.AddDays(1);
    
    private DateTime _minStartDate = DateTime.Now.AddDays(28);

    private string _single = "Single";
    private string _double = "Double";
    private string _family = "Family";

    private bool _display = false;
    
    List<Hotel>? _hotels;
    
    
    HotelBookingInfoDto? _hotelInfo;

    protected override async Task OnInitializedAsync()
    {
        var hotelResult = await Http.GetFromJsonAsync<HotelBookingInfoDto>("api/Booking/HotelBookingInfo");

        if (hotelResult != null)
        {
            _hotelInfo = hotelResult;
        }
    }
    
    private async Task GetHotelsBetweenDates()
    {
        _display = true;
        var result = await Http.GetFromJsonAsync<List<Hotel>>($"/api/Hotels/GetDates?startDate={_date1:yyyy-MM-dd}&endDate={_date2:yyyy-MM-dd}");
        
        if (result != null)
        {
            _hotels = result;
        }
    }

    private async Task BookRoom(int id, int roomCost, string roomType)
    {

        HotelBookingInfoDto hotelBookingInfo = new HotelBookingInfoDto
        {
            Id = id, 
            StartDate = _date1.Date, 
            EndDate = _date2.Date, 
            RoomCost = roomCost,
            RoomType = roomType
        };
        await Http.PostAsJsonAsync("api/Booking/HotelBooking", hotelBookingInfo);
        var booking = Http.GetFromJsonAsync<Booking>("api/Booking/GetBookingInfoInProgress");
        NavigationManager.NavigateTo($"/BookingInfo/{booking.Id}");
    }
}