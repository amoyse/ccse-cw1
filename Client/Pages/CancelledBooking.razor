@page "/CancelledBooking"
@page "/CancelledBooking/{Id:int}"
@using PacificTours.Shared.Entities
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Cancelled Booking Id: @Id </h3>

<br/>
<div>You have been refunded Â£@_refund</div>


@code {
    [Parameter]
    public int? Id { get; set; }

    private int _refund;
    
    
    protected override async Task OnInitializedAsync()
    {
        await AuthUser();
        var authorized = await Http.GetFromJsonAsync<bool>($"api/Auth/IsAuthorized?id={Id}");
        if (!authorized)
        {
            NavigationManager.NavigateTo("/");
        }

        var bookingResult = await Http.GetFromJsonAsync<Booking>($"api/Booking/GetBookingInfo?id={Id}");
        if (bookingResult?.Status != "Confirmed")
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var totalPaidResult = await Http.DeleteAsync($"api/Booking/DeleteBooking?id={Id}");
            var totalPaid = await totalPaidResult.Content.ReadFromJsonAsync<int>();
            _refund = totalPaid;
        }
        
    }
    
    private async Task AuthUser()
    {
        var myStateProv = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        var authState = await myStateProv.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.Name == "")
        {
            // forceLoad needed to actually load the page, otherwise url changes, but redirect doesn't occur
            NavigationManager.NavigateTo("/Identity/Account/Login", forceLoad: true);
        }
    }

}